/* eslint-disable max-len -- disabling file length limitation for compactness. */
module.exports = {
  env          : {browser: true, jest: true, node: true},
  extends      : ['plugin:import/typescript'],
  globals      : {document: 'readonly', navigator: 'readonly', window: 'readonly'},
  parser       : '@typescript-eslint/parser',
  parserOptions: {ecmaFeatures: {jsx: true}, ecmaVersion: 2020, sourceType: 'module'},
  plugins      : ['@typescript-eslint', 'react'],
  settings     : {react: {pragma: 'React', version: '17'}},

  // **Only** auto-fixable rules
  rules: {
    '@typescript-eslint/array-type'                     : ['error', {default: 'generic', readOnly: 'generic'}],
    '@typescript-eslint/member-delimiter-style'         : ['error', {multiline: {delimiter: 'none', requireLast: true}, singleline: {delimiter: 'comma', requireLast: false}}],
    '@typescript-eslint/no-explicit-any'                : ['error'],
    '@typescript-eslint/no-extra-parens'                : ['error'],
    '@typescript-eslint/no-extra-semi'                  : ['error'],
    '@typescript-eslint/object-curly-spacing'           : ['error', 'never'],
    '@typescript-eslint/padding-line-between-statements': ['error', {blankLine: 'always', next: ['if', 'multiline-block-like', 'multiline-const', 'multiline-expression', 'multiline-let', 'multiline-var'], prev: '*'}, {blankLine: 'always', next: '*', prev: ['if', 'multiline-block-like', 'multiline-const', 'multiline-expression', 'multiline-let', 'multiline-var']}],
    '@typescript-eslint/quotes'                         : ['error', 'single'],
    '@typescript-eslint/semi'                           : ['error', 'never'],
    '@typescript-eslint/space-before-function-paren'    : ['error', {anonymous: 'always', asyncArrow: 'always', named: 'never'}],
    '@typescript-eslint/space-infix-ops'                : ['error', {int32Hint: false}],
    '@typescript-eslint/type-annotation-spacing'        : ['error'],
    'arrow-parens'                                      : ['error', 'as-needed'],
    'arrow-spacing'                                     : ['error'],
    'brace-style'                                       : ['error', '1tbs', {allowSingleLine: true}],
    'comma-dangle'                                      : ['error', {arrays: 'always-multiline', exports: 'always-multiline', functions: 'always-multiline', imports: 'always-multiline', objects: 'always-multiline'}],
    'comma-spacing'                                     : ['error'],
    'curly'                                             : ['error', 'all'],
    'eol-last'                                          : ['error'],
    'eqeqeq'                                            : ['error'],
    'implicit-arrow-linebreak'                          : ['error', 'beside'],
    'indent'                                            : ['error', 2, {ArrayExpression: 1, CallExpression: {arguments: 1}, FunctionExpression: {parameters: 1}, MemberExpression: 1, ObjectExpression: 1, VariableDeclarator: 0}],
    'key-spacing'                                       : ['error', {afterColon: true, align: 'colon'}],
    'keyword-spacing'                                   : ['error', {after: false, before: false, overrides: {as: {after: true, before: true}, catch: {after: false, before: true}, const: {after: true, before: false}, default: {after: true, before: true}, else: {after: true, before: true}, export: {after: true, before: false}, finally: {after: true, before: true}, from: {after: true, before: true}, import: {after: true, before: false}, let: {after: true, before: false}, of: {after: true, before: true}, return: {after: true, before: false}, try: {after: true, before: false}, var: {after: true, before: false}}}],
    'no-alert'                                          : ['error'],
    'no-debugger'                                       : ['error'],
    'no-extra-parens'                                   : ['off'],
    'no-extra-semi'                                     : ['off'],
    'no-multi-spaces'                                   : ['error', {exceptions: {AssignmentExpression: true, Property: true}}],
    'no-multiple-empty-lines'                           : ['error', {max: 1}],
    'no-trailing-spaces'                                : ['error'],
    'no-unneeded-ternary'                               : ['error'],
    'object-curly-spacing'                              : ['off'],
    'object-shorthand'                                  : ['error', 'always'],
    'one-var'                                           : ['error', 'never'],
    'one-var-declaration-per-line'                      : ['error', 'always'],
    'padded-blocks'                                     : ['error', 'never'],
    'padding-line-between-statements'                   : ['off'],
    'quotes'                                            : ['off'],
    'semi'                                              : ['off'],
    'sort-imports'                                      : ['error', {ignoreCase: true, ignoreMemberSort: false, memberSyntaxSortOrder: ['none', 'all', 'multiple', 'single']}],
    'space-before-blocks'                               : ['error', 'always'],
    'space-before-function-paren'                       : ['off'],
    'space-infix-ops'                                   : ['off'],
    'strict'                                            : ['error', 'never'],
    'switch-colon-spacing'                              : ['error'],

    // This is the only rule which can not be fixed automatically. For the purpose of fixing it we are using prettier
    'max-len': ['error', {code: 120, ignoreComments: true, ignoreUrls: true, tabWidth: 2}],

    // React specific rules
    'jsx-quotes'                    : ['error'],
    'react/destructuring-assignment': ['error', 'never', {ignoreClassFields: true}],
    'react/jsx-curly-spacing'       : ['error', 'never'],
    'react/jsx-fragments'           : ['error', 'element'],
    'react/jsx-no-useless-fragment' : ['error'],
    'react/self-closing-comp'       : ['error'],
  },
}
